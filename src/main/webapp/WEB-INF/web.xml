<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
  <!--<context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
      /WEB-INF/applicationContext.xml,
      classpath:springmvc.xml,
    </param-value>
  </context-param>-->
  <!--<context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>log4j.properties</param-value>
  </context-param>-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <!--springmvc前端控制器-->
  <servlet>
    <servlet-name>dispatcher</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--
    contextConfigLocation 配置springmvc加载的配置文件（配置处理器映射器、适配器等）
    如果不配置，默认加载的是/WEB_INF/servlet名称-servlet.xml(dispatcher-servlet.xml)
    -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring/spring-mvc.xml</param-value>
    </init-param>
    <!--
    1)load-on-startup元素标记容器是否在启动的时候就加载这个servlet(实例化并调用其
    init()方法)。
    2)它的值必须是一个整数，表示servlet应该被载入的顺序
    2)当值为0或者大于0时，表示容器在应用启动时就加载并初始化这个servlet；
    3)当值小于0或者没有指定时，则表示容器在该servlet被选择时才会去加载。
    4)正数的值越小，该servlet的优先级越高，应用启动时就越先加载
    5)当值相同时，容器就会自己选择顺序来加载。
    所以，<load-on-startup>x</load-on-startup>，
    中x的取值1，2，3，4，5代表的是优先级，而非启动延迟时间。
    -->
    <load-on-startup>1</load-on-startup>
    <!--
    <async-supported>子标签，该标签的默认取值为false，
    要启用异步处理支持，则将其设为true即可
    -->
    <async-supported>true</async-supported>
  </servlet>

  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <!--
    ① *.action，访问以.action结尾的由DispatcherServlet进行解析；
    ② /,所有/的地址都由DispatcherServlet进行解析，
       对于静态的文件的解析需要配置不让DispatcherServlet进行解析，
       使用此种风格可以实现RESTFull风格的url解析；
    ③ /*，这样配置错误，使用这种配置时，最终要转发到jsp页面时，
      仍然会由DsipatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错
    -->
    <url-pattern>*.action</url-pattern>
  </servlet-mapping>

  <!--welcome pages-->
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
</web-app>